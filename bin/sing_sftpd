#!/bin/bash

# This wrapper script will act as OpenSSH's sftp-server, but running inside
# a singularity container which is launched with a set of --overlay options.
# See the embedded usage statement below for more info.

# By Pierre Rioux, pierre.rioux@mcgill.ca, November 2019
#
# See https://github.com/aces/sing-squashfs-support
#
# This gives examples on how to invoke this script as a wrapper
# for mounting squashfs files using sshfs.

VERSION="2.0"

# Important note for developers: the sshd <-> sftp-server
# connection is performed strictly with STDIN and STDOUT,
# so we are not allowed to pollute any of these two streams
# while running this script! If you need to debug,
# echo stuff to files in /tmp instead. E.g. like in
#
#   echo "inspecting prefix=$PREFIX" > /tmp/deb.1
#
# You can also add 'echo' in front of the final
# singularity command to inspect it (but not while
# mounting with sshfs).

# Why oh why is this not at the same place?
# When the container is launched, we'll look for both.
RPM_OPEN_SSH_SFTPD="/usr/libexec/openssh/sftp-server" # Centos location
APT_OPEN_SSH_SFTPD="/usr/lib/sftp-server"             # Ubuntu location

# Documentation and usage statement
function usage() {
  cat <<USAGE 1>&2
This is $0 $VERSION by Pierre Rioux"

Usage: $0 [-D directory] [singularity_image_file] [overlay_file_pattern...]

where:

  -D directory

    is an optional base directory for finding both singulariy_image_file
    and overlay_file_pattern. If provided, the program will chdir there
    first before attempting to resolve the other file or pattern arguments.

    If a directory is given and no other arguments are provided (that is,
    no singularity_image_file and no overlay_file_pattern), then the program
    will pick the first file named "*.simg" in the directory for its
    singularity image file, and will pick all files ending in .squashfs,
    .sqs or .ext4 as the overlays.

  singularity_image_file

    is a path to a singularity container image. The image must contain at
    least the openssh-server package. It can be a relative or absolute
    path. See also -D above.

  overlay_file_pattern ...

    can be repeated, and are patterns for a set of overlay image files
    (e.g. /path/to/something*.squashfs). Individual files can be provided,
    or several pattern can be provided to represent several sets.

Examples:

 # Overlays are all explicitely given:
 $0 centos.simg *.squashfs

 # Overlays are given with a pattern:
 $0 centos.simg '*.squashfs'

 # Using a -D to specify where to look for all the files:
 $0 -D /my/path centos.simg '*.squashfs'

 # Using a -D to specify where to look just for the overlays:
 $0 -D /my/path /some/other/place/centos.simg '*.squashfs'

 # Using a -D and no other arguments
 # a) singularity image will be first .simg
 # b) overlays will be all .squashfs, .sqs or .ext4 files
 $0 -D /my/path/for/everything

USAGE
  exit 2
}

####################################
# Command-line validation
####################################

if test $# -lt 2 ; then
  usage
fi

# Optional PREFIX in -D
if test "X$1" = "X-D" ; then
  PREFIX="$2"
  shift ; shift
  if ! test -d "$PREFIX" ; then
    echo "Error: '$PREFIX' for option -D is not a directory." 1>&2
    exit 2
  fi

  # This is important, and it makes all the path
  # resolution code below relative to it now.
  cd "$PREFIX" || exit 2
fi

if test "X$PREFIX" = "X" -a $# -lt 2 ; then
  echo "Error: missing paths for singularity image and overlay files." 1>&2
  exit 2
fi

# Argument #1 is the path of the singularity image
# Argument #2... are paths (or patterns) for one (or several) overlay images
SING_IMAGE="$1"; shift # can be empty string if -D provided
OVERLAYS="$@"          # can also be empty if -D provided

# Find image and overlays if necessary
if test -n "$PREFIX" ; then

  # Auto find image
  if test -z "$SING_IMAGE" ; then # if no image given, find one
    SING_IMAGE=$(ls -1 | grep '\.simg$' | head -1)
    if test -z "$SING_IMAGE" ; then
      echo "Error: can't find a .simg image in directory '$PREFIX'." 1>&2
      exit 2
    fi
  fi

  # Auto find overlays
  if test -z "$OVERLAYS" ; then 
    OVERLAYS=$(ls -1 | egrep '\.squashfs$|\.sqs$|\.ext4$')
  fi

fi

# Validate image file
if ! test -f "$SING_IMAGE" ; then
  test -n "$PREFIX" && echo "Error: while switched to directory '$PREFIX':" 1>&2
  echo "Error: '$SING_IMAGE' doesn't seem to be present and an image file." 1>&2
  exit 2
fi

# Generate singularity overlays options, expanding patterns at the same time.
# Note that this is a place where errors can occur silently:
# if the user provide bad patterns that do not match any files, the
# pattern will be ignored.
SING_OVERLAYS=$(ls -1 $OVERLAYS | sed -e 's/^/--overlay=/')

# OK do the main work now.
#
# I use two 'exec's to simplify the process hierarchy!
#
# I also used a wonderful 'type -p' thingie to autodetect
# the location of the openssh sftp-server program.
#
# How glorious!
exec singularity -s exec \
  $SING_OVERLAYS         \
  $SING_IMAGE            \
  bash -c "exec \$(type -p $RPM_OPEN_SSH_SFTPD || type -p $APT_OPEN_SSH_SFTPD)"

# If bash reaches this point, something is clearly wrong.
